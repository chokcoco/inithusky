#! /usr/bin/env node

const program = require('commander');
const inquirer = require('inquirer');
const chalk = require('chalk');
const fs = require('fs');
const shelljs = require('shelljs');
const packageJson = require('./package.json');

let isNpm = true;

function end(opt) {
  // 同步发布到 npm 与 tnpm，eslint 规则稍有不同
  let shellCode = isNpm ? 'npm install' : 'tnpm install';

  console.log(chalk.green('依赖正在安装，可能会占用您两分钟，请稍等...'));
  shelljs.exec(shellCode);
  console.log(`${chalk.cyan(shellCode)}`);

  opt.isCommitLint && console.log(chalk.gray('生成 commitlint 配置文件: ') + chalk.yellow('commitlint.config.js'));
  opt.isEslint && console.log(chalk.gray('生成 eslint 配置文件: ') + chalk.yellow('.eslintrc.js'));
  opt.isStylelint && console.log(chalk.gray('生成 stylelint 配置文件: ') + chalk.yellow('.stylelintrc.js'));

  console.log('安装结束，开启编码之旅!');
}

function writeCommitLintPackageJson(isCommitLint) {
  if (!isCommitLint) {
    return;
  }

  console.log(chalk.green('开始初始化 commitlint 钩子...'));

  const content = fs.readFileSync('./package.json', 'utf-8');
  const pkgJson = JSON.parse(content);

  if (!pkgJson.husky) {
    pkgJson.husky = {};
  }

  if (!pkgJson.husky.hooks) {
    pkgJson.husky.hooks = {};
  }

  if (pkgJson.husky.hooks['commit-msg']) {
    delete pkgJson.husky.hooks['commit-msg'];
  }

  pkgJson.husky.hooks['commit-msg'] = 'commitlint -E HUSKY_GIT_PARAMS';

  // 依赖
  pkgJson.devDependencies.husky = '3.0.3';
  pkgJson.devDependencies['@commitlint/cli'] = '8.3.5';
  pkgJson.devDependencies['@commitlint/config-conventional'] = '8.3.4';

  // commitlint Rule
  fs.copyFileSync(__dirname + '/commitlint.config.js', './commitlint.config.js');
  // rewrite package.json
  fs.writeFileSync('./package.json', JSON.stringify(pkgJson));
  
}

function writeEslintPackageJson(isEslint, isStylelint) {
  if (!isEslint && !isStylelint) {
    return;
  }

  console.log(chalk.green('开始初始化 Eslint、Stylelint 钩子...'));

  const content = fs.readFileSync('./package.json', 'utf-8');
  const pkgJson = JSON.parse(content);

  if (!pkgJson.husky) {
    pkgJson.husky = {};
  }

  if (!pkgJson.husky.hooks) {
    pkgJson.husky.hooks = {};
  }

  if (pkgJson.husky.hooks['pre-commit']) {
    delete pkgJson.husky.hooks['pre-commit'];
  }

  if (!pkgJson['lint-staged']) {
    pkgJson['lint-staged'] = {};
  }

  if (!pkgJson.devDependencies) {
    pkgJson.devDependencies = {};
  }

  pkgJson.husky.hooks['pre-commit'] = 'lint-staged';

  // 依赖
  pkgJson.devDependencies.husky = '3.0.3';
  pkgJson.devDependencies['lint-staged'] = '9.2.1';

  if (isEslint) {
    pkgJson['lint-staged']['./src/*.js'] = ['eslint --config ./.eslintrc.js --fix', 'git add'];

    pkgJson.devDependencies.eslint = '^5.16.0';
    pkgJson.devDependencies['babel-eslint'] = '10.0.2';
    pkgJson.devDependencies['eslint-config-airbnb'] = '18.0.1';
    pkgJson.devDependencies['eslint-plugin-import'] = '2.18.2';
    pkgJson.devDependencies['eslint-plugin-jsx-a11y'] = '6.2.3';
    pkgJson.devDependencies['eslint-plugin-react'] = '7.14.3';
    pkgJson.devDependencies['@tencent/eslint-config-tencent'] = '0.3.3';

    let eslintName = isNpm ? '/.eslintrc_npm.js' : '/.eslintrc.js';

    // eslint Rule
    fs.copyFileSync(__dirname + eslintName, './.eslintrc.js');
  }

  if (isStylelint) {
    pkgJson['lint-staged']['./css/*.css'] = ['stylelint --config ./.stylelintrc.js --fix', 'git add'];

    pkgJson.devDependencies.stylelint = '^10.1.0';
    pkgJson.devDependencies['stylelint-config-standard'] = '^18.3.0';
    pkgJson.devDependencies['stylelint-scss'] = '^3.8.0';

    // stylelint Rule
    fs.copyFileSync(__dirname + '/.stylelintrc.js', './.stylelintrc.js');

  }

  // rewrite package.json
  fs.writeFileSync('./package.json', JSON.stringify(pkgJson));
}

program
  .version(packageJson.version, '-v, --version')
  .action(() => {
    console.log(chalk.green('欢迎使用自动化 Git 钩子安装程序'));

    let isReady = false;
    let name = packageJson.name;

    isNpm = name === '@tencent/inithusky' ? false : true;

    try {
      isReady = fs.readFileSync('./package.json', 'utf-8');
    } catch (e) {
      console.log(chalk.red('[Error] 请在项目根目录下执行该指令！'));
    }

    if (!isReady) {
      return;
    }

    inquirer.prompt([
      {
        type: 'confirm',
        name: 'isCommitLint',
        message: '是否需要安装 commitlint Git 钩子?',
        default: true,
      },
      {
        type: 'confirm',
        name: 'isEslint',
        message: '是否需要安装 Eslint Git 钩子?(对 Javascript 代码进行风格规范检测)',
        default: true,
      },
      {
        type: 'confirm',
        name: 'isStylelint',
        message: '是否需要安装 Stylelint Git 钩子?(对 CSS 代码进行风格规范检测)',
        default: true,
      },
    ]).then((answers) => {
      this.isCommitLint = answers.isCommitLint;
      this.isEslint = answers.isEslint;
      this.isStylelint = answers.isStylelint;

      writeEslintPackageJson(this.isEslint, this.isStylelint);
      writeCommitLintPackageJson(this.isCommitLint);

      if (this.isCommitLint || this.isEslint || this.isStylelint) {
        end({
          isCommitLint: this.isCommitLint,
          isEslint: this.isEslint,
          isStylelint: this.isStylelint
        });
      } else {
        console.log(chalk.green('流程结束'));
      }
    });
  });

program.parse(process.argv);