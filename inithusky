#! /usr/bin/env node

const program = require('commander');
const inquirer = require('inquirer');
const chalk = require('chalk');
const fs = require('fs');
const shelljs = require('shelljs');
const packageJson = require('./package.json');
const beautify = require('js-beautify').js;

let isCommitLint = false;
let isEslint = false;;
let isStylelint = false;

let husky = {};
let lintStaged = {};

husky.hooks = {};

/**
 * 读取 inithusky 命令根目录源文件 source，并且将 fileData 数据追加写入到当前指令执行目录 target 下
 * @param source 源文件
 * @param target 目标文件
 * @param fileData 追加数据
 */
function _appendFile(source, target, fileData) {
  // 读取
  fs.copyFileSync(__dirname + source, target);

  // 写入
  fs.appendFileSync(target, `module.exports = ${JSON.stringify(fileData)}`, (err) => {
    if (err) throw err;
  });

  // 美化
  fs.readFile(target, 'utf8', function (err, data) {
    if (err) {
        throw err;
    }

    const beautifyData = beautify(data, { 
      indent_size: 2, 
      space_in_empty_paren: true,
      "end_with_newline": true,
      "wrap_line_length": 40,
    });

    // 再写入
    fs.writeFileSync(target, beautifyData);
  });
}

function end() {
  // 同步发布到 npm 与 tnpm，eslint 规则稍有不同
  let shellCode = 'npm install';

  console.log(chalk.green('依赖正在安装，可能会占用您两分钟，请稍等...'));
  shelljs.exec(shellCode);
  console.log(`${chalk.cyan(shellCode)}`);

  isCommitLint && console.log(chalk.gray('生成 commitlint 配置文件: ') + chalk.yellow('commitlint.config.js'));
  isEslint && console.log(chalk.gray('生成 eslint 配置文件: ') + chalk.yellow('.eslintrc.js'));
  isStylelint && console.log(chalk.gray('生成 stylelint 配置文件: ') + chalk.yellow('.stylelintrc.js'));

  if (isStylelint || isCommitLint || isEslint) {
    console.log(chalk.gray('生成 husky 配置文件: ') + chalk.yellow('.huskyrc.js'));
  }

  if (isStylelint || isEslint) {
    console.log(chalk.gray('生成 lint-staged 配置文件: ') + chalk.yellow('lint-staged.config.js'));
  }

  console.log('安装结束，开启编码之旅!');
}

function writeHuskyAndLintstagedFile() {
  _appendFile('/.huskyrc.js', './.huskyrc.js', husky);

  if (isEslint || isStylelint) {
    _appendFile('/lint-staged.config.js', './lint-staged.config.js', lintStaged);
  }
}

function writeCommitLintPackageJson() {
  if (!isCommitLint) {
    return;
  }

  console.log(chalk.green('开始初始化 commitlint 钩子...'));

  const content = fs.readFileSync('./package.json', 'utf-8');
  const pkgJson = JSON.parse(content);

  if (pkgJson.husky) {
    delete pkgJson.husky;
  }

  if (!pkgJson.devDependencies) {
    pkgJson.devDependencies = {};
  }

  husky.hooks['commit-msg'] = 'commitlint -E HUSKY_GIT_PARAMS';

  // 依赖
  pkgJson.devDependencies.husky = '3.0.3';
  pkgJson.devDependencies['@commitlint/cli'] = '8.3.5';
  pkgJson.devDependencies['@commitlint/config-conventional'] = '8.3.4';

  // commitlint Rule
  fs.copyFileSync(__dirname + '/commitlint.config.js', './commitlint.config.js');
  // rewrite package.json
  fs.writeFileSync('./package.json', JSON.stringify(pkgJson));
}

function writeEslintPackageJson() {
  if (!isEslint && !isStylelint) {
    return;
  }

  console.log(chalk.green('开始初始化 Eslint、Stylelint 钩子...'));

  const content = fs.readFileSync('./package.json', 'utf-8');
  const pkgJson = JSON.parse(content);

  if (pkgJson.husky) {
    delete pkgJson.husky;
  }

  if (pkgJson['lint-staged']) {
    delete pkgJson['lint-staged'];
  }

  if (!pkgJson.devDependencies) {
    pkgJson.devDependencies = {};
  }

  husky.hooks['pre-commit'] = 'lint-staged';

  // 依赖
  pkgJson.devDependencies.husky = '3.0.3';
  pkgJson.devDependencies['lint-staged'] = '9.2.1';

  if (isEslint) {
    lintStaged['./src/*.js'] = ['eslint --config ./.eslintrc.js --fix', 'git add'];

    pkgJson.devDependencies.eslint = '^5.16.0';
    pkgJson.devDependencies['babel-eslint'] = '10.0.2';
    pkgJson.devDependencies['eslint-config-airbnb-base'] = '14.1.0';
    pkgJson.devDependencies['eslint-plugin-import'] = '2.18.2';

    let eslintName = '/.eslintrc.js';

    // eslint Rule
    fs.copyFileSync(__dirname + eslintName, './.eslintrc.js');
  }

  if (isStylelint) {
    lintStaged['./css/*.css'] = ['stylelint --config ./.stylelintrc.js --fix', 'git add'];

    pkgJson.devDependencies.stylelint = '^10.1.0';
    pkgJson.devDependencies['stylelint-config-standard'] = '^18.3.0';
    pkgJson.devDependencies['stylelint-scss'] = '^3.8.0';

    // stylelint Rule
    fs.copyFileSync(__dirname + '/.stylelintrc.js', './.stylelintrc.js');
  }

  // rewrite package.json
  fs.writeFileSync('./package.json', JSON.stringify(pkgJson));
}

program
  .version(packageJson.version, '-v, --version')
  .action(() => {
    console.log(chalk.green('欢迎使用自动化 Git 钩子安装程序'));

    let isReady = false;
    let name = packageJson.name;

    try {
      isReady = fs.readFileSync('./package.json', 'utf-8');
    } catch (e) {
      console.log(chalk.red('[Error] 请在项目根目录下执行该指令！'));
    }

    if (!isReady) {
      return;
    }

    inquirer.prompt([
      {
        type: 'confirm',
        name: 'isCommitLint',
        message: '是否需要安装 commitlint Git 钩子?',
        default: true,
      },
      {
        type: 'confirm',
        name: 'isEslint',
        message: '是否需要安装 Eslint Git 钩子?(对 Javascript 代码进行风格规范检测)',
        default: true,
      },
      {
        type: 'confirm',
        name: 'isStylelint',
        message: '是否需要安装 Stylelint Git 钩子?(对 CSS 代码进行风格规范检测)',
        default: true,
      },
    ]).then((answers) => {
      isCommitLint = answers.isCommitLint;
      isEslint = answers.isEslint;
      isStylelint = answers.isStylelint;

      writeEslintPackageJson(isEslint, isStylelint);
      writeCommitLintPackageJson(isCommitLint);

      if (isCommitLint || isEslint || isStylelint) {
        writeHuskyAndLintstagedFile();
        end();
      } else {
        console.log(chalk.green('流程结束'));
      }
    });
  });

program.parse(process.argv);